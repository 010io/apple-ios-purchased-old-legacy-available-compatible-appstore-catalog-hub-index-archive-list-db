name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 3:00 AM UTC for dependency updates and security checks
    - cron: '0 3 * * *'

env:
  PYTHON_VERSION: "3.12"
  NODE_VERSION: "20"

jobs:
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ruff mypy black isort
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
        
    - name: Run Ruff linting
      run: |
        ruff check . --output-format=github
        
    - name: Run Ruff formatting check
      run: |
        ruff format --check .
        
    - name: Run Black formatting check
      run: |
        black --check --diff .
        
    - name: Run isort import sorting check
      run: |
        isort --check-only --diff .
        
    - name: Run MyPy type checking
      run: |
        mypy . --ignore-missing-imports --show-error-codes
        
    # GitHub Copilot integration for code analysis
    - name: GitHub Copilot Code Review
      if: github.event_name == 'pull_request'
      uses: github/copilot-cli-action@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        command: 'analyze'
        files: '**/*.py'
        
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint
    
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
        
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-asyncio httpx
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
        
    - name: Run pytest with coverage
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        TESTING: true
      run: |
        pytest -v --cov=. --cov-report=xml --cov-report=term-missing --cov-fail-under=85
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: catalog_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-integration-${{ hashFiles('**/requirements*.txt') }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install pytest pytest-asyncio httpx
        
    - name: Start FastAPI service
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/catalog_db
      run: |
        uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 10  # Wait for service to start
        
    - name: Health Check
      run: |
        curl -f http://localhost:8000/health || exit 1
        
    - name: Test API endpoints
      run: |
        # Test main endpoints
        curl -f http://localhost:8000/catalog?limit=5
        curl -f http://localhost:8000/docs
        curl -f http://localhost:8000/redoc
        
    - name: Run data collector test
      run: |
        python -m fetcher.run --limit 10 --test-mode
        
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install safety and bandit
      run: |
        pip install safety bandit[toml]
        
    - name: Check dependencies for security vulnerabilities
      run: |
        safety check --json
        
    - name: Run bandit security linter
      run: |
        bandit -r . -f json -o bandit-report.json || true
        
    - name: Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          
  docker:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: [test, integration-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
          
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: ios-catalog-hub:test
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
        
    - name: Test Docker image
      run: |
        # Start container in background
        docker run -d -p 8000:8000 --name test-container ios-catalog-hub:test
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:8000/health || exit 1
        
        # Test API
        curl -f http://localhost:8000/docs || exit 1
        
        # Cleanup
        docker stop test-container
        docker rm test-container
        
    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache
        
  docker-publish:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
  performance:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        pip install locust httpx
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: Start FastAPI service
      run: |
        uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 10
        
    - name: Run performance tests
      run: |
        # Create simple locust test file
        cat > locustfile.py << 'EOF'
        from locust import HttpUser, task, between
        
        class ApiUser(HttpUser):
            wait_time = between(1, 3)
            
            @task
            def test_catalog_endpoint(self):
                self.client.get("/catalog?limit=10")
                
            @task
            def test_health_endpoint(self):
                self.client.get("/health")
        EOF
        
        # Run performance test
        locust -f locustfile.py --headless -u 10 -r 2 -t 30s --host=http://localhost:8000
        
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker-publish, performance]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your deployment commands here
        # e.g., kubectl apply, docker compose, etc.
        
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [lint, test, integration-tests, security, docker]
    if: always()
    
    steps:
    - name: Notify on success
      if: needs.lint.result == 'success' && needs.test.result == 'success' && needs.integration-tests.result == 'success'
      run: |
        echo "✅ All CI checks passed successfully!"
        
    - name: Notify on failure
      if: failure()
      run: |
        echo "❌ CI pipeline failed. Check the logs for details."
